name: CI
on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [Debug, Release]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.1
        with:
          vulkan-query-version: 1.4.309
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true

      - name: Cache SDL2
        id: cache-sdl2
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/external/SDL2
          key: ${{ runner.os }}-sdl2-2.28.5

      - name: Install SDL2
        if: steps.cache-sdl2.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          mkdir -p external
          cd external
          $SDL2_VERSION = "2.28.5"
          Invoke-WebRequest -Uri "https://github.com/libsdl-org/SDL/releases/download/release-$SDL2_VERSION/SDL2-devel-$SDL2_VERSION-VC.zip" -OutFile "SDL2-devel-$SDL2_VERSION-VC.zip"
          Expand-Archive "SDL2-devel-$SDL2_VERSION-VC.zip" -DestinationPath .
          Move-Item "SDL2-$SDL2_VERSION" SDL2
          cd ..

      - name: Cache CMake build
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/build
          key: ${{ runner.os }}-cmake-${{ matrix.build_type }}-${{ hashFiles('CMakeLists.txt', '**/CMakeLists.txt') }}
          restore-keys: ${{ runner.os }}-cmake-${{ matrix.build_type }}-

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} -j 4

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{matrix.build_type}} --output-on-failure

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-windows-${{matrix.build_type}}
          path: |
            ${{github.workspace}}/build/${{matrix.build_type}}/*.exe
            ${{github.workspace}}/build/${{matrix.build_type}}/*.dll
          if-no-files-found: warn

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [Debug, Release]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libvulkan-dev libsdl2-dev libspdlog-dev libglm-dev

      - name: Cache CMake build
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/build
          key: ${{ runner.os }}-cmake-${{ matrix.build_type }}-${{ hashFiles('CMakeLists.txt', '**/CMakeLists.txt') }}
          restore-keys: ${{ runner.os }}-cmake-${{ matrix.build_type }}-

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} -j $(nproc)

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{matrix.build_type}} --output-on-failure

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-linux-${{matrix.build_type}}
          path: ${{github.workspace}}/build/bin/*
          if-no-files-found: warn

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy libvulkan-dev libsdl2-dev libspdlog-dev libglm-dev

      - name: Create build directory for compile_commands.json
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..

      - name: Run clang-tidy
        run: |
          echo "Running static analysis..."
          find project examples tests -iname "*.cpp" | xargs clang-tidy -p build --warnings-as-errors='*' || echo "::warning::Static analysis found issues"
