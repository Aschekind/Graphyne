name: Coding Style Enforcement

on:
  workflow_dispatch:
  pull_request:
    branches: [develop]

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache clang-format
        uses: actions/cache@v4
        with:
          path: ~/.clang-format-cache
          key: ${{ runner.os }}-clang-format-${{ hashFiles('**/.clang-format') }}
          restore-keys: ${{ runner.os }}-clang-format-

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format

      - name: Check formatting
        id: check-formatting
        run: |
          echo "Checking code formatting..."
          # Create a file with formatting issues
          FORMAT_ISSUES=$(mktemp)

          # Find files needing formatting and save to the issues file
          find project examples tests -type f \( -iname "*.cpp" -o -iname "*.h" -o -iname "*.hpp" \) |
          while read file; do
            if ! clang-format --dry-run --Werror "$file" &>/dev/null; then
              echo "$file" >> "$FORMAT_ISSUES"
            fi
          done

          # Count issues
          ISSUE_COUNT=$(cat "$FORMAT_ISSUES" | wc -l)

          if [ "$ISSUE_COUNT" -gt 0 ]; then
            echo "::warning::Found $ISSUE_COUNT files with formatting issues"
            echo "Files with formatting issues:"
            cat "$FORMAT_ISSUES"
            echo "FORMATTING_NEEDED=true" >> $GITHUB_ENV
            echo "ISSUE_COUNT=$ISSUE_COUNT" >> $GITHUB_ENV
          else
            echo "Code formatting check passed!"
            echo "FORMATTING_NEEDED=false" >> $GITHUB_ENV
          fi

      - name: Apply formatting
        if: env.FORMATTING_NEEDED == 'true' && (github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request')
        run: |
          echo "Applying code formatting to ${{ env.ISSUE_COUNT }} files..."
          find project examples tests -type f \( -iname "*.cpp" -o -iname "*.h" -o -iname "*.hpp" \) | xargs clang-format -i

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          git add .
          git commit -m "style: auto-format code with clang-format [skip ci]"

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git push
            echo "Formatting fixes pushed to PR branch"
          else
            git push origin HEAD:$(git rev-parse --abbrev-ref HEAD)
            echo "Formatting fixes pushed to current branch"
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request' && env.FORMATTING_NEEDED == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'âœ¨ Code formatting has been automatically applied to this PR. Please review the changes.'
            })
